##########################################
############## Load pluggins #############

# Plug
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/plug.kak" noload

plug "lenormf/kakoune-extra" subset %{
    comnotes.kak
    dictcomplete.kak
    hatch_terminal.kak
    idsession.kak
    lineindent.kak
    syntastic.kak
    tldr.kak
    utils.kak
    git.kak
    mutt.kak
    git-branch.kak
    percent.kak
}

plug "alexherbo2/prelude.kak"
plug "alexherbo2/auto-pairs.kak"
plug "alexherbo2/connect.kak"
plug "occivink/kakoune-gdb"
plug "occivink/kakoune-sudo-write"
plug "TeddyDD/kakoune-edit-or-dir"
plug "andreyorst/powerline.kak" config %{
    powerline-start
}

# Color scheme
plug "andreyorst/base16-gruvbox.kak" noload do %{
    mkdir -p $HOME/.config/kak/colors
    find $PWD -type f -name "*.kak" -exec ln -sf {} $HOME/.config/kak/colors/ \;
} config %{
    colorscheme base16-gruvbox-dark-hard # or any other variant
}

plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path . # `--path .' is needed by recent versions of cargo
} config %{
    set-option global lsp_diagnostic_line_error_sign '║'
    set-option global lsp_diagnostic_line_warning_sign '┊'

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

    hook global WinSetOption filetype=(c|cpp|rust|python) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-auto-hover-enable
        lsp-enable-window
    }

    hook global WinSetOption filetype=(rust) %{
        set-option window lsp_server_configuration rust.clippy_preference="on"
    }

    hook global WinSetOption filetype=rust %{
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global KakEnd .* lsp-exit
}


##########################################
############# Format Options ############# 

# Toggle line numbering
addhl global/ number-lines -relative -hlcursor
# Wrap lines at the end of the window
addhl global/ wrap
# Show the matching parenthesis pair
addhl global/ show-matching

# Default tabs format
set global tabstop 4
set global indentwidth 4

# Default autowrap size
set global autowrap_column 80

# Turn off Clippy
set global ui_options ncurses_assistant=none

# Syntastic option
set global syntastic_autoformat true

#########################################
################ Aliases ################

# Spawn a terminal
#alias global term hatch-terminal-x11

# Prepare IDE
def ide %{
    rename-client tools
    set global toolsclient tools

    new rename-client main
    set global jumpclient main
}



def hard_wrap_selection %{
    exec "|fmt -w %opt{autowrap_column} -g %opt{autowrap_column} -c<ret>"
}

#########################################
########## Custom Key Bindings ##########

# Quick way to save-quit
map global user q :wq<ret> -docstring "save and quit"

# Allow to paste things copied at an other place
map global user P '<a-!>xsel --output --primary<ret>' -docstring "paste primary buffer"
map global user p '<a-!>xsel --output --clipboard<ret>' -docstring "paste clipboard buffer"
map global user Y '<a-|> xsel --input --primary <ret>' -docstring "yank primary buffer"
map global user y '<a-|> xsel --input --clipboard <ret>' -docstring "yank clipboard buffer"

# Allows selection indent
map global normal <tab> '<a-;><gt>' -docstring "indent selection"
map global normal <s-tab> '<a-;><lt>' -docstring "unindent selection"

# Commenting area
map global normal '#' :comment-line<ret> -docstring 'comment line'
map global normal '<a-$>' :comment-block<ret> -docstring 'comment block'

# Autowrap area
map global user f :hard_wrap_selection<ret> -docstring "hardwrap current selection"

# Ctags user shortcuts
map global user t ':ctags-search<ret>' -docstring "search for ctags"
map global user i ':ctags-funcinfo<ret>' -docstring "search for function info"

# Surround pairs
map global user s -docstring 'Surround' ':<space>auto-pairs-surround<ret>'
map global user S -docstring 'Surround++' ':<space>auto-pairs-surround _ _ * *<ret>'

# fzf toggle mode
map global user o -docstring 'switch to fzf mode' ': fzf-mode<ret>'

# GDB keybindings
hook global GlobalSetOption gdb_started=true %{
    map global normal <f10>   ': gdb-next<ret>'
    map global normal <f11>   ': gdb-step<ret>'
    map global normal <s-f11> ': gdb-finish<ret>'
    map global normal <f9>    ': gdb-toggle-breakpoint<ret>'
    map global normal <f5>    ': gdb-continue<ret>'
}
hook global GlobalSetOption gdb_started=false %{
    unmap global normal <f10>   ': gdb-next<ret>'
    unmap global normal <f11>   ': gdb-step<ret>'
    unmap global normal <s-f11> ': gdb-finish<ret>'
    unmap global normal <f9>    ': gdb-toggle-breakpoint<ret>'
    unmap global normal <f5>    ': gdb-continue<ret>'
}

#########################################
################# Hooks #################

# Auto replace tabs with spaces
hook global InsertChar \t %{ try %{
    execute-keys -draft h %opt{indentwidth}@
} }

hook global WinCreate .* %{
    set-option window aligntab false
    alias global terminal x11-terminal
}

# Toggle git diff by default
hook global WinCreate .* %{ git show-diff }
hook global BufWritePost .* %{ git update-diff }

# Remove trailing whitespaces
hook global BufWritePre .* %{ try %{ execute-keys -draft '%s[\h\v]+$<ret><a-d>'} }

hook global WinCreate .*\.tex %{
  set global makecmd "~/Scripts/make_refresh.sh"
  autowrap-enable
}

hook global BufWritePost .*\.tex %{ make }

# Match pairs
hook global WinCreate .* %{ auto-pairs-enable }

############################################
############## Custom Configs ##############
# Load the custom kakrc
eval %sh{
    proj_dir=$(git rev-parse --show-toplevel 2> /dev/null)
    if [ -n "${proj_dir}" ]; then
        echo try %{ source ${proj_dir}/.kakbis.kak }
    fi
    echo try %{ source .kakbis.kak }
    echo try %{ source .kakrc.kak }
}
